// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gxovnt.messaging.container.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_gxovnt_2emessaging_2econtainer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_gxovnt_2emessaging_2econtainer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gxovnt_2emessaging_2econtainer_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_gxovnt_2emessaging_2econtainer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_gxovnt_2emessaging_2econtainer_2eproto;
namespace gxovnt {
namespace messaging {
class Container;
struct ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
}  // namespace messaging
}  // namespace gxovnt
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace gxovnt {
namespace messaging {
enum Container_MessageType_Id : int {
  Container_MessageType_Id_ClearConfig = 0,
  Container_MessageType_Id_SaveConfig = 1,
  Container_MessageType_Id_SetSystemName = 2,
  Container_MessageType_Id_GetSystemName = 3,
  Container_MessageType_Id_SetSystemType = 4,
  Container_MessageType_Id_GetSystemType = 5,
  Container_MessageType_Id_SetWiFiSSID = 6,
  Container_MessageType_Id_GetWiFiSSID = 7,
  Container_MessageType_Id_SetWiFiPassword = 8,
  Container_MessageType_Id_GetWiFiPassword = 9,
  Container_MessageType_Id_Echo = 10,
  Container_MessageType_Id_Container_MessageType_Id_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Container_MessageType_Id_Container_MessageType_Id_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Container_MessageType_Id_IsValid(int value);
extern const uint32_t Container_MessageType_Id_internal_data_[];
constexpr Container_MessageType_Id Container_MessageType_Id_MessageType_Id_MIN = static_cast<Container_MessageType_Id>(0);
constexpr Container_MessageType_Id Container_MessageType_Id_MessageType_Id_MAX = static_cast<Container_MessageType_Id>(10);
constexpr int Container_MessageType_Id_MessageType_Id_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
Container_MessageType_Id_descriptor();
template <typename T>
const std::string& Container_MessageType_Id_Name(T value) {
  static_assert(std::is_same<T, Container_MessageType_Id>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Id_Name().");
  return Container_MessageType_Id_Name(static_cast<Container_MessageType_Id>(value));
}
template <>
inline const std::string& Container_MessageType_Id_Name(Container_MessageType_Id value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Container_MessageType_Id_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool Container_MessageType_Id_Parse(absl::string_view name, Container_MessageType_Id* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Container_MessageType_Id>(
      Container_MessageType_Id_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Container final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gxovnt.messaging.Container) */ {
 public:
  inline Container() : Container(nullptr) {}
  ~Container() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Container(
      ::google::protobuf::internal::ConstantInitialized);

  inline Container(const Container& from) : Container(nullptr, from) {}
  inline Container(Container&& from) noexcept
      : Container(nullptr, std::move(from)) {}
  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Container& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kTextValue = 2,
    kIntValue = 3,
    MSG_NOT_SET = 0,
  };
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
        &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Container& a, Container& b) { a.Swap(&b); }
  inline void Swap(Container* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Container* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Container>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Container& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Container& from) { Container::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Container* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gxovnt.messaging.Container"; }

 protected:
  explicit Container(::google::protobuf::Arena* arena);
  Container(::google::protobuf::Arena* arena, const Container& from);
  Container(::google::protobuf::Arena* arena, Container&& from) noexcept
      : Container(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using MessageType_Id = Container_MessageType_Id;
  static constexpr MessageType_Id ClearConfig = Container_MessageType_Id_ClearConfig;
  static constexpr MessageType_Id SaveConfig = Container_MessageType_Id_SaveConfig;
  static constexpr MessageType_Id SetSystemName = Container_MessageType_Id_SetSystemName;
  static constexpr MessageType_Id GetSystemName = Container_MessageType_Id_GetSystemName;
  static constexpr MessageType_Id SetSystemType = Container_MessageType_Id_SetSystemType;
  static constexpr MessageType_Id GetSystemType = Container_MessageType_Id_GetSystemType;
  static constexpr MessageType_Id SetWiFiSSID = Container_MessageType_Id_SetWiFiSSID;
  static constexpr MessageType_Id GetWiFiSSID = Container_MessageType_Id_GetWiFiSSID;
  static constexpr MessageType_Id SetWiFiPassword = Container_MessageType_Id_SetWiFiPassword;
  static constexpr MessageType_Id GetWiFiPassword = Container_MessageType_Id_GetWiFiPassword;
  static constexpr MessageType_Id Echo = Container_MessageType_Id_Echo;
  static inline bool MessageType_Id_IsValid(int value) {
    return Container_MessageType_Id_IsValid(value);
  }
  static constexpr MessageType_Id MessageType_Id_MIN = Container_MessageType_Id_MessageType_Id_MIN;
  static constexpr MessageType_Id MessageType_Id_MAX = Container_MessageType_Id_MessageType_Id_MAX;
  static constexpr int MessageType_Id_ARRAYSIZE = Container_MessageType_Id_MessageType_Id_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MessageType_Id_descriptor() {
    return Container_MessageType_Id_descriptor();
  }
  template <typename T>
  static inline const std::string& MessageType_Id_Name(T value) {
    return Container_MessageType_Id_Name(value);
  }
  static inline bool MessageType_Id_Parse(absl::string_view name, MessageType_Id* value) {
    return Container_MessageType_Id_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMessageTypeIdFieldNumber = 1,
    kTextValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
  };
  // .gxovnt.messaging.Container.MessageType_Id messageTypeId = 1;
  void clear_messagetypeid() ;
  ::gxovnt::messaging::Container_MessageType_Id messagetypeid() const;
  void set_messagetypeid(::gxovnt::messaging::Container_MessageType_Id value);

  private:
  ::gxovnt::messaging::Container_MessageType_Id _internal_messagetypeid() const;
  void _internal_set_messagetypeid(::gxovnt::messaging::Container_MessageType_Id value);

  public:
  // string TextValue = 2;
  bool has_textvalue() const;
  void clear_textvalue() ;
  const std::string& textvalue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_textvalue(Arg_&& arg, Args_... args);
  std::string* mutable_textvalue();
  PROTOBUF_NODISCARD std::string* release_textvalue();
  void set_allocated_textvalue(std::string* value);

  private:
  const std::string& _internal_textvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textvalue(
      const std::string& value);
  std::string* _internal_mutable_textvalue();

  public:
  // int32 IntValue = 3;
  bool has_intvalue() const;
  void clear_intvalue() ;
  ::int32_t intvalue() const;
  void set_intvalue(::int32_t value);

  private:
  ::int32_t _internal_intvalue() const;
  void _internal_set_intvalue(::int32_t value);

  public:
  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:gxovnt.messaging.Container)
 private:
  class _Internal;
  void set_has_textvalue();
  void set_has_intvalue();
  inline bool has_msg() const;
  inline void clear_has_msg();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int messagetypeid_;
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr textvalue_;
      ::int32_t intvalue_;
    } msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gxovnt_2emessaging_2econtainer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Container

// .gxovnt.messaging.Container.MessageType_Id messageTypeId = 1;
inline void Container::clear_messagetypeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messagetypeid_ = 0;
}
inline ::gxovnt::messaging::Container_MessageType_Id Container::messagetypeid() const {
  // @@protoc_insertion_point(field_get:gxovnt.messaging.Container.messageTypeId)
  return _internal_messagetypeid();
}
inline void Container::set_messagetypeid(::gxovnt::messaging::Container_MessageType_Id value) {
  _internal_set_messagetypeid(value);
  // @@protoc_insertion_point(field_set:gxovnt.messaging.Container.messageTypeId)
}
inline ::gxovnt::messaging::Container_MessageType_Id Container::_internal_messagetypeid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::gxovnt::messaging::Container_MessageType_Id>(_impl_.messagetypeid_);
}
inline void Container::_internal_set_messagetypeid(::gxovnt::messaging::Container_MessageType_Id value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messagetypeid_ = value;
}

// string TextValue = 2;
inline bool Container::has_textvalue() const {
  return msg_case() == kTextValue;
}
inline void Container::set_has_textvalue() {
  _impl_._oneof_case_[0] = kTextValue;
}
inline void Container::clear_textvalue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() == kTextValue) {
    _impl_.msg_.textvalue_.Destroy();
    clear_has_msg();
  }
}
inline const std::string& Container::textvalue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gxovnt.messaging.Container.TextValue)
  return _internal_textvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Container::set_textvalue(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() != kTextValue) {
    clear_msg();

    set_has_textvalue();
    _impl_.msg_.textvalue_.InitDefault();
  }
  _impl_.msg_.textvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gxovnt.messaging.Container.TextValue)
}
inline std::string* Container::mutable_textvalue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_textvalue();
  // @@protoc_insertion_point(field_mutable:gxovnt.messaging.Container.TextValue)
  return _s;
}
inline const std::string& Container::_internal_textvalue() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (msg_case() != kTextValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.msg_.textvalue_.Get();
}
inline void Container::_internal_set_textvalue(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() != kTextValue) {
    clear_msg();

    set_has_textvalue();
    _impl_.msg_.textvalue_.InitDefault();
  }
  _impl_.msg_.textvalue_.Set(value, GetArena());
}
inline std::string* Container::_internal_mutable_textvalue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() != kTextValue) {
    clear_msg();

    set_has_textvalue();
    _impl_.msg_.textvalue_.InitDefault();
  }
  return _impl_.msg_.textvalue_.Mutable( GetArena());
}
inline std::string* Container::release_textvalue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:gxovnt.messaging.Container.TextValue)
  if (msg_case() != kTextValue) {
    return nullptr;
  }
  clear_has_msg();
  return _impl_.msg_.textvalue_.Release();
}
inline void Container::set_allocated_textvalue(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_msg()) {
    clear_msg();
  }
  if (value != nullptr) {
    set_has_textvalue();
    _impl_.msg_.textvalue_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:gxovnt.messaging.Container.TextValue)
}

// int32 IntValue = 3;
inline bool Container::has_intvalue() const {
  return msg_case() == kIntValue;
}
inline void Container::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void Container::clear_intvalue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() == kIntValue) {
    _impl_.msg_.intvalue_ = 0;
    clear_has_msg();
  }
}
inline ::int32_t Container::intvalue() const {
  // @@protoc_insertion_point(field_get:gxovnt.messaging.Container.IntValue)
  return _internal_intvalue();
}
inline void Container::set_intvalue(::int32_t value) {
  if (msg_case() != kIntValue) {
    clear_msg();
    set_has_intvalue();
  }
  _impl_.msg_.intvalue_ = value;
  // @@protoc_insertion_point(field_set:gxovnt.messaging.Container.IntValue)
}
inline ::int32_t Container::_internal_intvalue() const {
  if (msg_case() == kIntValue) {
    return _impl_.msg_.intvalue_;
  }
  return 0;
}

inline bool Container::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Container::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline Container::MsgCase Container::msg_case() const {
  return Container::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
}  // namespace gxovnt


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::gxovnt::messaging::Container_MessageType_Id> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gxovnt::messaging::Container_MessageType_Id>() {
  return ::gxovnt::messaging::Container_MessageType_Id_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_gxovnt_2emessaging_2econtainer_2eproto_2epb_2eh
